import pandas as pd
import torch
from ._constants import SUBMISSION_DIR as SUBMISSION_DIR
from .data import make_DataLoader as make_DataLoader
from .utils import Accumulator as Accumulator, Animator as Animator, backup_script as backup_script
from _typeshed import Incomplete
from torch import nn as nn

class RegressionAutoManager:
    device: Incomplete
    X_train: Incomplete
    y_train: Incomplete
    X_test: Incomplete
    net_cls: Incomplete
    net_params: Incomplete
    optimizer_cls: Incomplete
    optimizer_params: Incomplete
    criterion: Incomplete
    metric_map: Incomplete
    def __init__(self, *, X_train: torch.Tensor, y_train: torch.Tensor, X_test: torch.Tensor, net_cls: nn.Module, net_params: dict, criterion_cls: nn.Module, criterion_params: dict, optimizer_cls: torch.optim.Optimizer, optimizer_params: dict, device: str = 'cuda') -> None: ...
    def exploratory_train(self, *, subset_size: int, num_epochs: int, metric_names: list[str] = ['loss'], ylim: tuple[float, float] = (0, 1)): ...
    def train_and_eval(self, *, k_folds: int, batch_size: int, num_epochs: int, metric_names: list[str] = ['loss'], ylim: tuple[float, float] = (0, 1)): ...
    def final_train(self, *, batch_size: int, num_epochs: int, metric_names: list[str] = ['loss'], ylim: tuple[float, float] = (0, 1)) -> nn.Module: ...
    def predict(self, *, test_df: pd.DataFrame, model: nn.Module, pred_col_name: str, batch_size: int = 512, model_path: str, submission_dir: str = ..., device: str = 'cuda'): ...

class ClassificationAutoManager(RegressionAutoManager):
    def __init__(self, *args, **kwargs) -> None: ...
    def exploratory_train(self, *, subset_size: int, num_epochs: int, metric_names: list[str] = ['loss', 'acc'], ylim: tuple[float, float] = (0, 1)): ...
    def train_and_eval(self, *, k_folds: int, batch_size: int, num_epochs: int, metric_names: list[str] = ['loss', 'acc'], ylim: tuple[float, float] = (0, 1)): ...
    def final_train(self, *, batch_size: int, num_epochs: int, metric_names: list[str] = ['loss', 'acc'], ylim: tuple[float, float] = (0, 1)) -> nn.Module: ...
    def predict(self, *, test_df: pd.DataFrame, model: nn.Module, pred_col_name: str, batch_size: int = 512, model_path: str, submission_dir: str = ..., device: str = 'cuda'): ...
